<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 吧对象的创建交给spring来管理-->
    <!--spring 对bean的管理细节
        1、创建bean的三种方式
        2、bean对象的作用范围
        3、bean对象的生命周期
     -->

    <!-- 创建bean的三种方式-->
    <!-- 第一种方式：使用默认构造函数创建
            在spring配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时，
            采用的就是默认构造函数创建bean对象，此时类中没有默认构造函数，则对象无法创建
    -->
    <!--<bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>-->

    <bean id="accountDao" class="com.itheima.dao.impl.AccountDaoImpl"></bean>

    <!-- 第二种方式：使用普通工厂的方法创建对象（使用某个类中的方法创建对象并存入spring容器)
    <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->

    <!--第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）
    <bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!-- bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值：常用的就是单例多例
                singleten:单例的（默认值）
                prototype:多例的
                request：作用于web应用的请求范围
                session:作用于web应用的回话范围
                global-session：作用于集群环境的回话范围（全局回话范围） 当不是集群时，就是session

    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"></bean>
    -->

    <!--bean对象的生命周期
            单例对象
                出生：当容器创建时对象出生
                活着：只要容器还在，就一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象：
                出生：当我们使用spring框架时为我们创建
                活着：对象只要在使用过程中就一直活着
                死亡：当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器进行回收
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"></bean>
     -->

    <!-- 构造函数注入：
         使用的标签:constructor-arg
         标签出现的位置：bean标签内部
         标签中的属性：
                    type：用于指定要注入的数据类型，该数据类型是构造函数中某个或者某些参数的类型
                    index：用于指定要注入的数据给构造函数指定索引位置的参数赋值，索引位置是从零开始
                    name：用于指定给构造函数中指定名称的参数赋值                                             常用的
                    =====================以上三个用于指定给构造函数中的哪个参数赋值========================
                    value:用于提供基本类型和String类型的数据
                    ref：用于指定其他bean类型数据。他指的就是在spring的Ioc核心容器中出现的bean对象

                优势：
                    在获取bean对象时，必须注入数据，否则对象无法创建成功
                劣势：
                    改变了bean对象的实例化方式，使我们在用不着这些数据时，也必须提供这些数据
     -->
    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="123"></constructor-arg>
        <constructor-arg name="age" value="123"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!-- 配置一个日期对象-->
    <bean name="now" class="java.util.Date"></bean>

    <!-- set方法注入                               -常用
        涉及的标签：property
        出现的位置：bean标签的内部
        标签的属性：
            name：用于指定注入时所调用的set方法名称
            value:用于提供基本数据类型String类型的数据
            ref：用于指定其他bean类型数据。指在spring的Ioc核心容器中出现过的bean对象
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端：
            如果某个成员必须有值，则获取对象是有可能set方法没有执行。
    -->
    <bean id="accountService2" class="com.itheima.service.impl.AccountServiceImpl2">
        <property name="name" value="123"></property>
        <property name="age" value="123"></property>
        <property name="birthday" ref="now"></property>
    </bean>


    <!--复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签：
            list array set
        用于给map结构集合注入的标签：
            map props
        结构相同，标签可以互换
     -->
    <bean id="accountService3" class="com.itheima.service.impl.AccountServiceImpl3">
        <property name="mystrs">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>ccc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>ccc</value>
            </set>
        </property>
        <property name="myMap">
            <map>
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>BBB</value>
                </entry>
            </map>
        </property>
        <property name="myprops">
            <props>
            <prop key="testC">ddd</prop>
            <prop key="testD">ddd</prop>
            </props>
        </property>


    </bean>


</beans>